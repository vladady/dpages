<?php

function dpages_menu(){
  $items['dpages'] = array(
    'title' => 'Dynamic pages edit',
    'page callback' => 'dpages_view',
    'access callback' => TRUE,
  );

  $items['dpages_box'] = array(
    'title' => 'Block',
    'page callback' => 'dpages_box',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

// Retrieve existing blocks and save them
function dpages_blocks(){
  $settings = array();

  $module_name = 'dpages';
  $path = drupal_get_path('module', $module_name);
  $setttings_file = $module_name . '.conf.php';

  if(file_exists($path . '/' . $setttings_file)){
    include $path . '/' . $setttings_file;
  }

  return $settings;
}

function dpages_block_save($settings){
  $module_name = 'dpages';
  $path = drupal_get_path('module', 'dpages');
  $setttings_file = $module_name . '.conf.php';

  $export = '<?php $settings = ' . var_export($settings, TRUE) .';';
  file_put_contents($path . '/' . $setttings_file , $export);
}

// Default boxes in a region
function regions_default(){
  $page = array(
    1 => array(
      'type' => 'row',
      'parent' => 0,
    ),
    2 => array(
      'type' => 'span',
      'parent' => 1,
      'weight' => 1,
      'width' => 12,
    ),
  );

  return $page;
}

//Connected elements needed
function row_spans($row, $widths){
  $elements = array();

  $i = 0;
  foreach($widths as $width){
    $id = uniqid();
    $elements[$id] = array(
      'id' => $id,
      'type' => 'span',
      'parent' => $row['id'],
      'width' => $width,
      'weight' => $i++,
    );
  }

  return $elements;
}

function connected_row($row){
  return row_spans($row, array(6,6));
}

function dpages_box(){
  $output = array();

  //One item is added/changed and requested for display
  $item = isset($_POST['item']) ? $_POST['item'] : array();

  $id = !empty($item['id']) ? $item['id'] : uniqid();
  $type = !empty($item['type']) ? $item['type'] : '';

  $boxes = dpages_blocks();
  $new = !isset($boxes[$id]) ? TRUE : FALSE;

  if(!$new){
    $element = &$boxes[$id];
  }
  else{
    $element = array('id' => $id);

    if(function_exists('connected_' . $type)){
      $boxes += call_user_func_array('connected_' . $type, array($element));
    }
  }

  //Check item params
  $params = array('id', 'type' , 'cid' , 'parent' , 'weight' , 'width');
  foreach($params as $param){
    if(isset($item[$param]) && !is_null($item[$param])){
      $element[$param] = $item[$param];
    }
  }

  if($new) {
    $boxes[$id] = $element;
  }

  if(isset($_POST['weights']) && !empty($_POST['weights'])){
    foreach($_POST['weights'] as $pos => $id){
      if($id != 'undefined'){
        $boxes[$id]['weight'] = $pos;
      }
    }
  }
  //dpm($boxes);
  dpages_block_save($boxes);

  if($type == 'row'){
    $html = dpages_page_render2($boxes, $element['id']);
  }
  else {
    //Return render element requested
    $rendered_element = elem_render($element);
    $html = drupal_render($rendered_element);
  }

  return drupal_json_output(array(
    'html' => $html,
  ));
}

function dregions2(){
  $page = dpages_blocks();
  $page = array(
    '#markup' => dpages_page_render2($page),
  );
  return $page;
}

function _dpages_available_blocks(){
  global $theme_key;

  $query = db_select('block', 'b');
  $result = $query->fields('b')
    ->condition('b.theme', $theme_key)
    //->condition('b.status', 1)
    ->orderBy('b.region')
    ->orderBy('b.weight')
    ->orderBy('b.module')
    ->addTag('block_load')
    ->addTag('translatable')
    ->execute();

  $block_info = $result->fetchAllAssoc('bid');
  drupal_alter('block_list', $block_info);

  $available_blocks = array();
  foreach ($block_info as $block) {
    $available_blocks[] = (array) $block;
  }

  return $available_blocks;
}

function dpages_page_alter(&$page){//return;
  global $user;
  $output = array();
  $is_admin = in_array('administrator', $user->roles);

  if($is_admin){
    drupal_add_js(drupal_get_path('module', 'dpages') . '/dpages.js');
    drupal_add_css(drupal_get_path('module', 'dpages') . '/dpages.css');
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.sortable');
    drupal_add_library('system', 'ui.resizable');

    $boxes = dpages_boxes();
    $output['boxes'] = array(
      '#markup' => $boxes,
    );
  }

  //Store active content
  $active_content = &drupal_static('active_content');
  $active_content = $page['content']['system_main'];

  $output['regions'] = dregions2();
  $page['content']['system_main'] = $output;
}

function dpages_boxes(){
  $blocks = _dpages_available_blocks();

  $items = array();

  $items[] = '<div class="block-element" data-type="active_content">Active content</div>';
  $items[] = '<div class="block-element" data-type="row">Row</div>';
  foreach ($blocks as $block) {
    $items[] = '<div class="block-element" data-cid="' . $block['bid'] . '" data-type="block">' . $block['delta'] . '</div>';
  }

  $output['blocks'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array(
      'class' => array('blocks')
    ),
    '#prefix' => '<div class="boxes-outer">',
    '#suffix' => '</div>',
  );

  return drupal_render($output);
}

function dpages_view(){
  return 'asdsada';
  //drupal_add_js(drupal_get_path('module', 'dpages') . '/jquery-sortable-min.js');
  drupal_add_js(drupal_get_path('module', 'dpages') . '/dpages.js');
  drupal_add_css(drupal_get_path('module', 'dpages') . '/dpages.css');
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.sortable');

  $boxes = dpages_boxes();
  $output['boxes'] = array(
    '#markup' => $boxes
  );

  $output['regions'] = array(
    //'#markup' => '<div class="row"><div class="span column">x</div></div>',
    dregions2(),
    //dregions(),
  );

  return $output;
}


// Render functions

function dpages_page_render2($page, $root = 1){
  $render_array = array();
  $pos = array();

  //Check dependencies and sort page by them
  $ids = array($root);
  $elements[$root] = $page[$root];

  while(count($ids)){
    $new_ids = array();
    foreach($ids as $id){
      foreach($page as $el_id => $element){
        if($element['parent'] == $id){
          $new_ids[] = $el_id;
          $elements[$el_id] = $element;
        }
      }
    }
    $ids = $new_ids;
  }
  $page = $elements;
  //dpm($page);

  // Build the big array
  foreach($page as $id => $element){
    if(!$element['parent'] || $id == $root){
      $render_array = $element;
      $pos[$id] = &$render_array;
    }
    else{
      $pos[$element['parent']]['content'][$element['weight']] = $element;
      $pos[$id] = &$pos[$element['parent']]['content'][$element['weight']];
    }
  }
  //dpm($render_array);

  return dpages_page_render($render_array);
}

function dregions(){
  $page = dpages_blocks();
  $page = array(
    '#markup' => dpages_page_render($page),
  );
  return $page;
}

function dpages_page_render($element){
  //$output = '';
  $content = array();
  $children = array();

  if(isset($element['content']) && is_array($element['content'])){
    $content = $element['content'];
    ksort($content);
  }

  foreach($content as $child){
    $children[] = array(
      '#markup' => dpages_page_render($child),
    );
  }

  $output = elem_render($element);

  if(is_array($output)){
    //Render children output inside
    if(count($children)){
      $output += array(
        '#markup' => drupal_render($children),
      );
    }

    $output = drupal_render($output);
  }

  return $output;
}

function elem_render($element){
  $output = array();

  $function = 'render_' . $element['type'];
  if(function_exists($function)){
    $output = call_user_func_array($function, array($element));
  }

  return $output;
}

function render_block($block){
  if(isset($block['cid'])){
    $b = db_select('block', 'b')
    ->fields('b')
    ->condition('bid', $block['cid'])
    ->execute()
    ->fetchAllAssoc('bid');
    $b = reset($b);

    $block += array(
      'module' => $b->module,
      'delta' => $b->delta,
    );
  }

  $render_block = block_load($block['module'], $block['delta']);
  $render_array = _block_get_renderable_array(_block_render_blocks(array($render_block)));

  $output = array(
    //'#prefix' => '<div class="span' . $block['width'] . ' column">',
    '#prefix' => '<div id="' . $block['id'] . '" data-type="block" class="box">',
    '#markup' => drupal_render($render_array),
    '#suffix' => '</div>',
  );

  return $output;
}

function render_row($row){
  $prefix = $suffix = '';

  //Check if row is also a span
  if(isset($row['width'])){
    $prefix = '<div class="span' . $row['width'] . '">';
    $suffix = '</div>';
  }

  //A row is a row
  $prefix .=  '<div id="' . $row['id'] .  '" data-type="row" class="row-fluid box">';
  $suffix .= '</div>';

  $output = array(
    '#prefix' => $prefix,
    '#suffix' => $suffix,
  );

  return $output;
}

function render_span($span){
  $prefix =  '<div id="' . $span['id'] . '"class="span' . $span['width'] . ' column">';
  $suffix = '</div>';

  $output = array(
    '#prefix' => $prefix,
    '#suffix' => $suffix,
  );

  return $output;
}

function render_html($html){
  $output = array(
    '#prefix' => '<div class="span' . $html['width'] . ' column">',
    '#markup' => $html['content'],
    '#suffix' => '</div>',
  );

  return $output;
}

/*function render_container($container){
  $output = array(
    '#prefix' => '<div class="span' . $container['width'] . '">',
    '#suffix' => '</div>',
  );

  return $output;
}*/

function render_active_content($content){
  $active_content = &drupal_static('active_content');

  $output = array(
    '#prefix' => '<div id="' . $content['id'] . '" data-type="active_content" class="box">',
    '#markup' => drupal_render($active_content),
    '#suffix' => '</div>',
  );

  return $output;
}


